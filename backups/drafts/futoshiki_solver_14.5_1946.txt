# Shlomi Ben-Shushan 311408264


from random import random, randint, shuffle, sample, choice
from matplotlib import pyplot as plt


class Futoshiki:

    def __init__(self, mat_size, given_digits, relations):
        self.dim = mat_size
        self.matrix = [[0 for j in range(mat_size)] for i in range(mat_size)]
        self.given_digits = {(i - 1, j - 1): v for i, j, v in given_digits}
        for i, j in self.given_digits.keys():
            self.matrix[i][j] = self.given_digits[(i, j)]
        self.sol_size = mat_size * mat_size - len(given_digits)
        self.relations = [(a - 1, b - 1, c - 1, d - 1) for (a, b, c, d) in relations]

    def set(self, solution):
        k = 0
        for i in range(self.dim):
            for j in range(self.dim):
                if (i, j) not in self.given_digits.keys():
                    self.matrix[i][j] = solution[k]
                    k += 1

    def validate(self, solution):
        self.set(solution)
        for x in range(self.dim):
            for y in range(self.dim):
                v = self.matrix[x][y]
                for i in range(self.dim):
                    if i != x and self.matrix[i][y] == v:
                        return False
                for j in range(self.dim):
                    if j != y and self.matrix[x][j] == v:
                        return False
                for a, b, c, d in self.relations:
                    if (x, y) == (a, b) and self.matrix[x][y] <= self.matrix[c][d]:
                        return False
        return True

    def reset(self):
        for i in range(self.dim):
            for j in range(self.dim):
                if (i, j) not in self.given_digits.keys():
                    self.matrix[i][j] = 0


def mutate(solution, mut_params, dim):
    prob, rate = mut_params
    if random() <= prob:
        indexes = [i for i in range(len(solution))]
        chosen = sample(indexes, int(rate * len(solution)))
        for i in chosen:
            solution[i] = randint(1, dim)
    return solution


def cross_over(solution1, solution2):
    sep = randint(0, len(solution1) - 1)
    return solution1[:sep] + solution2[sep:]


def fitness(game, solution):
    game.set(solution)
    score = 0
    for x in range(game.dim):
        for y in range(game.dim):
            v = game.matrix[x][y]
            score += 2
            for i in range(game.dim):
                if i != x and game.matrix[i][y] == v:
                    score -= 1
                    break
            for j in range(game.dim):
                if j != y and game.matrix[x][j] == v:
                    score -= 1
                    break
    for a, b, c, d in game.relations:
        if game.matrix[a][b] > game.matrix[c][d]:
            score += 1
    return score


def genetic_solver(game, generations, pop_size, elitism, crossover, mutation, threshold):

    population = []
    for i in range(pop_size):
        population.append([randint(1, game.dim) for j in range(game.sol_size)])

    min_fitness = []
    avg_fitness = []
    max_fitness = []
    fitness_calls = 0
    highest_score = game.dim * game.dim * 2 + len(game.relations)

    n_elite = int(elitism * pop_size)
    n_newborns = int(crossover * pop_size)
    n_survivors = pop_size - n_elite - n_newborns

    chosen = None
    for g in range(generations):

        # Calculate fitness
        fitness_values = [fitness(game, s) for s in population]
        maximum = max(fitness_values)
        minimum = min(fitness_values)
        average = sum(fitness_values) / pop_size
        min_fitness.append(minimum)
        max_fitness.append(maximum)
        avg_fitness.append(average)
        fitness_calls += pop_size

        # Sort solutions according to fitness
        tuples = [(s, f) for s, f in zip(population, fitness_values)]
        tuples.sort(key=lambda tup: tup[1], reverse=True)
        chosen = tuples[0][0].copy()

        # Convergence test
        if maximum == highest_score:
            print('break 1')
            break
        if maximum - minimum < threshold:
            print('break 2')
            break

        # Elitism
        elites = [s.copy() for s, f in tuples[:n_elite]]

        # Cross-over + Mutation
        newborns = []
        i = 0
        while len(newborns) < n_newborns:
            (si, fi), (sj, fj) = tuples[i], tuples[(i + 1) % pop_size]
            x, y = randint(0, highest_score), randint(0, highest_score)
            if x <= fi and y <= fj:
                newborn = cross_over(si, sj).copy()
                mutated = mutate(newborn, mutation, game.dim)
                newborns.append(mutated)
            i = (i + 1) % pop_size

        # Replication + Mutation
        survivors = []
        i = 0
        while len(survivors) < n_survivors:
            s, f = tuples[i]
            if  randint(0, highest_score) <= f:
                mutated = mutate(s.copy(), mutation, game.dim)
                survivors.append(mutated)
            i = (i + 1) % pop_size

        # Create next generation
        population = elites + survivors + newborns

    plt.figure()
    plt.title('Fitness per generation')
    plt.xlabel('Generation')
    plt.ylabel('Fitness')
    x = list(range(len(min_fitness)))
    plt.plot(x, min_fitness, label='Minimal fitness')
    plt.plot(x, max_fitness, label='Maximal fitness')
    plt.plot(x, avg_fitness, label='Average fitness')
    plt.legend()
    plt.show()

    return chosen, fitness_calls


# def calibrate(game):
#     generations = 300
#     pop_sizes = 100
#     elitism = [i * 0.05 for i in range(11)]
#     mutation = [(p * 0.5, r) for p in range(20) for r in [0.05, 0.1, 0.15]]
#     crossover = [i * 0.05 for i in range(20)]
#     thresholds = 1
#     params = []
#     total = len(elitism) * len(mutation) * len(crossover)
#     p = 0
#     for a in elitism:
#         for b in mutation:
#             for c in crossover:
#                 s, _ = genetic_solver(game, 300, 100, a, b, c, 1)
#                 f = fitness(game, s)
#                 p += 1
#                 if f > 50:
#                     print(f'Process: {p} / {total} \t Score: {f} \t elitism: {a}, mutation: {b}, crossover: {c}')


def handle_convergence(game, generations, pop_size, p_mut, r_mut, p_co, threshold):
    solutions = []
    for i in range(10):
        s, f = genetic_solver(game, generations, pop_size, p_mut, r_mut, p_co, threshold)
        solutions.append((s, f))
    return min(solutions, key=lambda tup: tup[1])[0]


def main():
    game = Futoshiki(mat_size=5,
                     given_digits=[(1, 2, 4),
                                   (3, 3, 2)],
                     relations=[(1, 1, 1, 2),
                                (1, 4, 2, 4),
                                (2, 2, 2, 3),
                                (3, 4, 4, 4),
                                (4, 5, 3, 5),
                                (4, 4, 5, 4),
                                (5, 5, 4, 5),
                                (5, 2, 5, 1)])

    s, f = genetic_solver(game=game,
                          generations=300,
                          pop_size=100,
                          elitism=0.01,
                          crossover=0.5,
                          mutation=(0.5, 0.05),  # tuple of (prob, rate)
                          threshold=1)

    print(s)
    print(f'Validation: {game.validate(s)}, fitness: {fitness(game, s)}')

    true_solution = [5, 1, 2, 3, 2, 5, 3, 1, 4, 4, 3, 5, 1, 3, 1, 5, 4, 2, 1, 2, 4, 3, 5]
    print(f'Validation: {game.validate(true_solution)}, fitness: {fitness(game, true_solution)}')

    # calibrate(game)


if __name__ == '__main__':
    main()
